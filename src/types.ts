import { BinaryExprNode } from './nodes/BinaryExprNode';
import { UnaryExprNode } from './nodes/UnaryExprNode';

export enum NodeType {
  LogicalLiteral = 'LogicalLiteral',
  StringLiteral = 'StringLiteral',
  NumericLiteral = 'NumericLiteral',
  NullLiteral = 'NullLiteral',
  Identifier = 'Identifier',
  LogicalExpression = 'LogicaExpression',
  BinaryExpression = 'BinaryExpression',
  UnaryExpression = 'UnaryExpression',
  MemberExpression = 'MemberExpression',
  ExpressionStatement = 'ExpressionStatement',
  FunctionDeclaration = 'FunctionDeclaration',
  AssignmentExpression = 'AssignmentExpression',
  BlockStatement = 'BlockStatement',
  EmptyStatement = 'EmptyStatement',
  VariableDeclarator = 'VariableDeclarator',
  VariableDeclaration = 'VariableDeclaration',
  DoWhileStatement = 'DoWhileStatement',
  WhileStatement = 'WhileStatement',
  ForStatement = 'ForStatement',
  IfStatement = 'IfStatement',
  ReturnStatement = 'ReturnStatement',
  Program = 'Program',
};

export enum TokenType {
  Semicolon = 'SEMICOLON',
  LeftCurlyBrace = 'LEFT_CURLY_BRACE',
  RightCurlyBrace = 'RIGHT_CURLY_BRACE',
  If = 'IF',
  Function = 'FUNCTION',
  Return = 'RETURN',
  While = 'WHILE',
  Do = 'DO',
  Comma = 'COMMA',
  Dot = 'DOT',
  For = 'FOR',
  Else = 'ELSE',
  Number = 'NUMBER',
  Let = 'let',
  True = 'TRUE',
  False = 'FALSE', 
  Null = 'NULL',
  Identifier = 'IDENTIFIER',
  LogicalAnd = 'LOGICAL_AND',
  LogicalOr = 'LOGICAL_OR',
  ComplexAssignmentOperator = 'COMPLEX_ASSIGNMENT_OPERATOR',
  AdditiveOperator = 'ADDITIVE_OPERATOR',
  EqualityOperator = 'EQUALITY_OPERATOR',
  SimpleAssignmentOperator = 'SIMPLE_ASSIGNMENT_OPERATOR',
  ComparisonOperator = 'COMPARISON_OPERATOR',
  MultiplicativeOperator = 'MULTIPLICATIVE_OPERATOR',
  LeftSquareBracket = 'LEFT_SQUARE_BRACKET',
  RightSquareBracket = 'RIGHT_SQUARE_BRACKET',
  LeftParen = 'LEFT_PAREN',
  RightParen = 'RIGHT_PAREN',
  LogicalNotOperator = 'LOGICAL_NOT_OPERATOR',
  String = 'STRING',
};
